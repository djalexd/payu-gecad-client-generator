{{> licenceInfo }}

package {{ apiPackage }};

import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.ProxyAuthenticationStrategy;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import java.net.URI;
import java.util.Optional;

/**
 * Builder pattern for {@link AluApi}. It provides a simplified
 * way to customize the construction; of course, {@link AluApi}
 * can be completely customized through its constructor.
 */
public final class AluApiBuilder {
	
	private HttpClientBuilder clientBuilder = HttpClientBuilder.create();
	private URI target;
	private XmlMapper mapper = new XmlMapper();
	
	public AluApiBuilder withTarget(URI target) {
		this.target = target;
		return this;
	}
	
	public AluApiBuilder withXmlMapper(XmlMapper mapper) {
		this.mapper = mapper;
		return this;
	}
	
	public AluApiBuilder withHttpProxy(String proxyIp, int proxyPort, Optional<String> userName, Optional<String> password) {
		if ((userName.isPresent() && !password.isPresent()) || (!userName.isPresent() && password.isPresent())) {
			throw new IllegalArgumentException("Proxy userName and password must be both specified or both missing");
		}
		
		userName.ifPresent(u -> {
			final CredentialsProvider credentials = new BasicCredentialsProvider();
			final AuthScope scope = new AuthScope(proxyIp, proxyPort);
			credentials.setCredentials(scope, new UsernamePasswordCredentials(u, password.get()));
			clientBuilder.setDefaultCredentialsProvider(credentials);
			clientBuilder.setProxyAuthenticationStrategy(new ProxyAuthenticationStrategy());
		});
		
		clientBuilder.setProxy(new HttpHost(proxyIp, proxyPort));
		return this;
	}
	
	public AluApiBuilder acceptAnyCertificate() {
		clientBuilder.setSSLHostnameVerifier((s, sslSession) -> true);
		return this;
	}
	
	public AluApi build() {
		return new AluApi(clientBuilder.build(), target, mapper);
	}
}